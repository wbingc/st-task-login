<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.Login.mapper.UserMapper">

    <!-- Define ResultMap for Type User -->
    <resultMap id="userRM" type="com.example.Login.entity.UserDTO">
        <id property="id" javaType="int" column="id"/>
        <result property="email" javaType="string" column="email"/>
        <result property="name" javaType="string" column="name"/>
        <result property="password" javaType="string" column="password"/>
        <result property="status" javaType="string" column="status"/>
        <result property="token" javaType="string" column="token"/>
        <result property="balance" javaType="float" column="balance" />
    </resultMap>

    <!-- SELECT STATEMENT -->
    <!--
    <select id="findByEmail" parameterType="string" resultType="com.example.Login.entity.User">
        SELECT ID, NAME, PASSWORD, STATUS, TOKEN FROM USERS
        <where>
            EMAIL = #{email}
        </where>
    </select>
    -->

    <select id="findByEmail" parameterType="string" resultType="com.example.Login.entity.UserDTO">
        SELECT u.ID, u.EMAIL, u.NAME, u.PASSWORD, u.STATUS, u.TOKEN, w.BALANCE
        FROM USERS u
        JOIN WALLET w
        ON u.EMAIL = w.EMAIL
        <where>
            u.EMAIL = #{email}
        </where>
    </select>

    <select id="findByToken" parameterType="string" resultType="com.example.Login.entity.User">
        SELECT ID, EMAIL, PASSWORD FROM USERS
        <where>
            TOKEN = #{token}
        </where>
    </select>

    <select id="findAll" resultMap="userRM">
        SELECT u.ID, u.EMAIL, u.NAME, u.PASSWORD, u.STATUS, u.TOKEN, w.BALANCE
        FROM USERS u
        JOIN WALLET w
        ON u.EMAIL = w.EMAIL
    </select>

    <!-- INSERT STATEMENT -->
    <insert id="save" parameterType="com.example.Login.entity.User">
        INSERT INTO USERS (EMAIL, NAME, PASSWORD, STATUS, TOKEN ) VALUES (#{email}, #{name}, #{password}, #{status}, #{token})
    </insert>

    <!-- https://topic.alibabacloud.com/a/two-ways-to-bulk-insert-in-mybatis-insert-efficiently-_java_8_8_20134817.html -->
    <insert id="saveAll" parameterType="list">
        INSERT INTO USERS (EMAIL, NAME, PASSWORD, STATUS, TOKEN )
        <foreach collection="list" item="u" index="index" separator="union all">
            SELECT #{u.email}, #{u.name}, #{u.password}, #{u.status}, #{u.token}
            FROM DUAL
        </foreach>
    </insert>

    <insert id="saveUserWithWallet" parameterType="com.example.Login.entity.User">
        BEGIN
        INSERT INTO USERS (EMAIL, NAME, PASSWORD, STATUS, TOKEN ) VALUES (#{email}, #{name}, #{password}, #{status}, #{token});
        INSERT INTO WALLET (EMAIL) VALUES (#{email})
        ; END;
    </insert>

    <insert id="saveAllUserWithWallet" parameterType="list">
        <foreach collection="list" index="index" item="u" separator=";" open="BEGIN" close="; END;">
            INSERT INTO USERS (EMAIL, NAME, PASSWORD, STATUS, TOKEN ) VALUES (#{u.email}, #{u.name}, #{u.password}, #{u.status}, #{u.token});
            INSERT INTO WALLET (EMAIL) VALUES (#{u.email})
        </foreach>
    </insert>

    <!-- DELETE STATEMENT -->
    <delete id="deleteByEmail" parameterType="string">
        DELETE FROM USERS
        <where>
            EMAIL = #{email}
        </where>
    </delete>

    <delete id="deleteAll" parameterType="list">
        <foreach collection="list" index="index" item="u" separator=";" open="BEGIN" close="; END;">
            DELETE FROM USERS
            <where>
                EMAIL = #{u.email}
            </where>
        </foreach>
    </delete>

    <!-- UPDATE STATEMENT -->
    <update id="updateUser" parameterType="com.example.Login.entity.UserDTO">
        BEGIN
        UPDATE USERS
            <set>
                <if test="user.password != null">
                    PASSWORD = #{user.password},
                </if>
                <if test="user.token != null">
                    TOKEN = #{user.token},
                </if>
                <if test="user.name != null">
                    NAME = #{user.name},
                </if>
                <if test="user.status != null">
                    STATUS = #{user.status}
                </if>
            </set>
        <where>
            EMAIL = #{email};
        </where>
        UPDATE WALLET
            <set>
                <if test="user.balance != null">
                    BALANCE = #{user.balance}
                </if>
            </set>
        <where>
            EMAIL = #{email}
        </where>
        ; END;
    </update>

    <update id="updateAll" parameterType="list">
        <foreach collection="list" item="u" index="index" separator=";" open="BEGIN" close="; END;">
            <!-- UPDATE USERS SET NAME = #{u.name}, STATUS = #{u.status} WHERE EMAIL = #{u.email} -->
            UPDATE USERS
            <set>
                <if test="u.password != null">
                    PASSWORD = #{u.password},
                </if>
                <if test="u.token != null">
                    TOKEN = #{u.token},
                </if>
                <if test="u.name != null">
                    NAME = #{u.name},
                </if>
                <if test="u.status != null">
                    STATUS = #{u.status}
                </if>
            </set>
            <where>
                EMAIL = #{u.email};
            </where>
            UPDATE WALLET
            <set>
                <if test="u.balance != null">
                    BALANCE = #{u.balance}
                </if>
            </set>
            <where>
                EMAIL = #{u.email}
            </where>
        </foreach>
    </update>
</mapper>